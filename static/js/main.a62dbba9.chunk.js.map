{"version":3,"sources":["reducers/users/reducer.ts","reducers/orders/reducer.ts","reducers/books/reducer.ts","reducers/cart/reducer.ts","reducers/me/reducer.ts","reducers/rootReducer.ts","reducers/store.ts","components/Nav.tsx","pages/Authentication.tsx","App.tsx","serviceWorker.ts","index.tsx","reducers/orders/types.ts","reducers/helpers.ts","reducers/cart/types.ts","reducers/books/types.ts","reducers/me/types.ts","routes.ts","reducers/me/hooks.ts","reducers/me/actions.ts","reducers/users/requests.ts","reducers/users/actions.ts","reducers/users/hooks.ts","reducers/users/types.ts"],"names":["initialState","users","loading","hasLoaded","errorMessage","state","type","payload","ActionTypes","setUsers","addUsers","fetchStart","fetchEnd","orders","reducer","setOrders","updateOrders","replace","books","setBooks","console","log","addBooks","updateBooks","deleteBooks","filter","id","find","book","items","setItems","addItems","updateItems","removeItems","remove","me","set","clear","rootReducer","combineReducers","cartItems","persistConfig","key","storage","whitelist","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","Nav","pathname","useLocation","push","useHistory","useMe","AppBar","Tabs","variant","value","split","onChange","event","newValue","Object","keys","pages","k","roles","includes","role","noNav","map","Tab","label","name","Authentication","children","useGetUsers","useAuthenticate","authenticated","authenticate","useState","username","setUsername","password","setPassword","onSubmit","e","preventDefault","Backdrop","open","CircularProgress","TextField","fullWidth","target","disabled","required","Button","Typography","color","HomePage","lazy","UsersPage","LogoutPage","MyOrders","OrderPage","UserOrders","AdminOrderPage","AdminBookList","App","Container","Toolbar","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","orderStatuses","timeout","delay","Promise","resolve","setTimeout","exists","arr","v","updated","u","transformGoogleBookToApi","title","volumeInfo","author","authors","join","published_date","publishedDate","Date","toISOString","book_cover","imageLinks","thumbnail","quantity","Math","floor","random","addCartItem","item","removeCartItem","addCartItemCount","removeCartItemCount","getAllowedOrdersStatusChanges","userRole","orderStatus","UserRoles","admin","canceled","paid","sent","getAdminAllowedOrderStatusChanges","new","getClientAllowedOrdersStatusChanges","client","href","orderId","userId","useSelector","useLogout","clearMe","dispatch","useDispatch","useCallback","useMeActions","useEffect","setMe","getUsersFromStorage","JSON","parse","localStorage","getItem","setUsersToStorage","setItem","stringify","getUsers","a","postUsers","savedUsers","allUsers","authenticatedUser","user","Error","initialUsers","surname","forceFetch","createdUsers","useMemo","message","apiAuthenticate","useAllowAdmin"],"mappings":"0SAGMA,EAAe,CACnBC,MAAO,GACPC,SAAS,EACTC,WAAW,EACXC,aAAc,IA4BDH,EAzBD,WAGM,IAFlBI,EAEiB,uDAFTL,EAES,yCADfM,EACe,EADfA,KAAMC,EACS,EADTA,QAER,OAAQD,GACN,KAAKE,IAAYC,SACf,OAAO,eAAKJ,EAAZ,CAAmBJ,MAAOM,EAAQN,QAEpC,KAAKO,IAAYE,SACf,OAAO,eAAKL,EAAZ,CAAmBJ,MAAM,GAAD,mBAAMM,EAAQN,OAAd,YAAwBI,EAAMJ,UAExD,KAAKO,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eACFP,EADL,CAEED,aAAeG,GAAWA,EAAQH,cAAiB,GACnDF,SAAS,EACTC,WAAW,IAEf,QACE,OAAOE,I,gBC3BPL,EAAe,CACnBa,OAAQ,GACRX,SAAS,EACTC,WAAW,GAqBEW,EAlBC,WAGK,IAFnBT,EAEkB,uDAFVL,EAEU,yCADhBM,EACgB,EADhBA,KAAMC,EACU,EADVA,QAER,OAAQD,GACN,KAAKE,IAAYO,UACf,OAAO,eAAKV,EAAZ,CAAmBQ,OAAQN,EAAQM,SACrC,KAAKL,IAAYQ,aACf,OAAO,eAAKX,EAAZ,CAAmBQ,OAAQI,YAAQV,EAAQM,OAAQR,EAAMQ,UAC3D,KAAKL,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eAAKP,EAAZ,CAAmBH,SAAS,EAAOC,WAAW,IAChD,QACE,OAAOE,I,QCpBPL,EAAe,CACnBkB,MAAO,GACPhB,SAAS,EACTC,WAAW,EACXC,aAAc,IAmCDH,EAhCD,WAGM,IAFlBI,EAEiB,uDAFTL,EAES,yCADfM,EACe,EADfA,KAAMC,EACS,EADTA,QAER,OAAQD,GACN,KAAKE,IAAYW,SAEf,OADAC,QAAQC,IAAId,GACL,eAAKF,EAAZ,CAAmBa,MAAOX,EAAQW,QAEpC,KAAKV,IAAYc,SACf,OAAO,eAAKjB,EAAZ,CAAmBa,MAAM,GAAD,mBAAMX,EAAQW,OAAd,YAAwBb,EAAMa,UAExD,KAAKV,IAAYe,YACf,OAAO,eAAKlB,EAAZ,CAAmBa,MAAOD,YAAQV,EAAQW,MAAOb,EAAMa,SAEzD,KAAKV,IAAYgB,YACf,OAAO,eACFnB,EADL,CAEEa,MAAOb,EAAMa,MAAMO,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OACvBnB,EAAQW,MAAMS,MAAK,SAACC,GAAD,OAAgBA,EAAKF,KAAOA,UAItD,KAAKlB,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eAAKP,EAAZ,CAAmBH,SAAS,EAAOC,WAAW,IAChD,QACE,OAAOE,I,QCnCPL,EAAe,CACnB6B,MAAO,GACP3B,SAAS,EACTC,WAAW,GA6BEW,EA1BC,WAGG,IAFjBT,EAEgB,uDAFRL,EAEQ,yCADdM,EACc,EADdA,KAAMC,EACQ,EADRA,QAER,OAAQD,GACN,KAAKE,IAAYsB,SACf,OAAO,eAAKzB,EAAZ,CAAmBwB,MAAOtB,EAAQsB,QAEpC,KAAKrB,IAAYuB,SACf,OAAO,eAAK1B,EAAZ,CAAmBwB,MAAM,GAAD,mBAAMtB,EAAQsB,OAAd,YAAwBxB,EAAMwB,UAExD,KAAKrB,IAAYwB,YACf,OAAO,eAAK3B,EAAZ,CAAmBwB,MAAOZ,YAAQV,EAAQsB,MAAOxB,EAAMwB,SAEzD,KAAKrB,IAAYyB,YACf,OAAO,eAAK5B,EAAZ,CAAmBwB,MAAOK,YAAO3B,EAAQsB,MAAOxB,EAAMwB,SAExD,KAAKrB,IAAYG,WACf,OAAO,eAAKN,EAAZ,CAAmBH,SAAS,IAC9B,KAAKM,IAAYI,SACf,OAAO,eAAKP,EAAZ,CAAmBH,SAAS,EAAOC,WAAW,IAChD,QACE,OAAOE,I,QC7BPL,EAAe,CACnBmC,GAAI,KACJjC,SAAS,EACTC,WAAW,GAmBEW,EAhBC,WAGC,IAFfT,EAEc,uDAFNL,EAEM,yCADZM,EACY,EADZA,KAAMC,EACM,EADNA,QAER,OAAQD,GACN,KAAKE,IAAY4B,IACf,OAAO,eAAK/B,EAAZ,CAAmB8B,GAAI5B,EAAQ4B,KAEjC,KAAK3B,IAAY6B,MACf,OAAOrC,EAET,QACE,OAAOK,ICNEiC,EARKC,0BAAgB,CAClCtC,QACAY,SACAK,QACAsB,YACAL,OCPIM,EAAgB,CACpBC,IAAK,OACLC,YACAC,UAAW,CAAC,OAGR9B,EAAU+B,YAAeJ,EAAeH,GAExCQ,EAAQC,YAAe,CAC3BjC,UACAkC,WAAYC,YAAqB,CAC/BC,mBAAmB,MAIRJ,IAEFK,EAAYC,YAAaN,G,2CCMvBO,EAtBH,WAAO,IACTC,EAAaC,cAAbD,SACAE,EAASC,cAATD,KACArB,EAAOuB,cAAPvB,GAGR,OAAKA,EAIH,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAQ,aAAaC,MAAO,WAAIR,EAASS,MAAM,KAAK,MAAQ,EAAKC,SAPtD,SAACC,EAA8BC,GAA/B,OACnBV,EAAKU,KAOAC,OAAOC,KAAKC,KACV5C,QAAO,SAAA6C,GAAC,OAAID,IAAMC,GAAGC,MAAMC,SAASrC,EAAGsC,QAAUJ,IAAMC,GAAGI,SAC1DC,KAAI,SAAAL,GAAC,OACJ,kBAACM,EAAA,EAAD,CAAKlC,IAAK4B,EAAGR,MAAOQ,EAAGO,MAAOR,IAAMC,GAAGQ,YARxC,M,oDCoDIC,GAvDiD,SAAC,GAE1D,IADLC,EACI,EADJA,SAEAC,cADI,MAOAC,cAJFC,EAHE,EAGFA,cACAC,EAJE,EAIFA,aACAhF,EALE,EAKFA,aACAF,EANE,EAMFA,QANE,EAQ4BmF,mBAAS,IARrC,mBAQGC,EARH,KAQaC,EARb,OAS4BF,mBAAS,IATrC,mBASGG,EATH,KASaC,EATb,KAcJ,OAAIN,EACK,6BAAMH,GAGb,0BAAMU,SARa,SAACC,GACpBA,EAAEC,iBACFR,EAAaE,EAAUE,KAOrB,kBAACK,EAAA,EAAD,CAAUC,OAAQ5F,GAChB,kBAAC6F,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CACE1F,KAAK,OACLuE,MAAM,WACNoB,WAAS,EACTnC,MAAOwB,EACPtB,SAAU,SAAA2B,GAAC,OAAIJ,EAAYI,EAAEO,OAAOpC,QACpCqC,WAAYjG,EACZkG,UAAQ,IAGV,kBAACJ,EAAA,EAAD,CACE1F,KAAK,WACLuE,MAAM,WACNoB,WAAS,EACTnC,MAAO0B,EACPxB,SAAU,SAAA2B,GAAC,OAAIF,EAAYE,EAAEO,OAAOpC,QACpCqC,WAAYjG,EACZkG,UAAQ,IAGV,kBAACC,EAAA,EAAD,CAAQ/F,KAAK,UAAb,SAECF,GACC,kBAACkG,EAAA,EAAD,CAAYzC,QAAQ,KAAK0C,MAAM,SAC5BnG,K,SC/CLoG,GAAWC,gBAAK,kBAAM,wDACtBC,GAAYD,gBAAK,kBAAM,iCACvBE,GAAaF,gBAAK,kBAAM,kCACxBG,GAAWH,gBAAK,kBAAM,iCACtBI,GAAYJ,gBAAK,kBAAM,uDACvBK,GAAaL,gBAAK,kBAAM,iCACxBM,GAAiBN,gBAAK,kBAAM,uDAC5BO,GAAgBP,gBAAK,kBAAM,iCA+BlBQ,GA7BH,WACV,OACE,kBAAC,IAAD,CAAUnE,MAAOA,GACf,kBAAC,KAAD,CAAa5C,QAAS,KAAMiD,UAAWA,GACrC,kBAAC+D,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAACrB,EAAA,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,OAAK,EAACC,UAAWf,KACjC,kBAAC,IAAD,CAAOa,KAAK,aAAaC,OAAK,EAACC,UAAWP,KAC1C,kBAAC,IAAD,CAAOK,KAAK,SAASC,OAAK,EAACC,UAAWb,KACtC,kBAAC,IAAD,CAAOW,KAAK,wBAAwBC,OAAK,EAACC,UAAWT,KACrD,kBAAC,IAAD,CAAOO,KAAK,iCAAiCC,OAAK,EAACC,UAAWR,KAC9D,kBAAC,IAAD,CAAOM,KAAK,UAAUC,OAAK,EAACC,UAAWZ,KACvC,kBAAC,IAAD,CAAOU,KAAK,aAAaC,OAAK,EAACC,UAAWX,KAC1C,kBAAC,IAAD,CAAOS,KAAK,sBAAsBC,OAAK,EAACC,UAAWV,aC1BjDW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCE7IZ,IAAK9H,EAOA+H,EAPZ,oE,SAAY/H,K,6BAAAA,E,gCAAAA,E,+BAAAA,E,4BAAAA,M,cAOA+H,K,UAAAA,E,YAAAA,E,YAAAA,E,qBAAAA,M,maCFCC,EAAU,SAACC,GAAD,OACrB,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAEhCI,EAAS,SAACnH,EAASoH,GAAV,OAAyBA,EAAInH,MAAK,SAAAoH,GAAC,OAAIA,EAAErH,KAAOA,MACzDT,EAAU,SAAC+H,EAAgBF,GAAjB,OACrBA,EAAInE,KAAI,SAAAoE,GAAC,OAAIC,EAAQrH,MAAK,SAAAsH,GAAC,OAAIF,EAAErH,KAAOuH,EAAEvH,OAAOqH,MACtC7G,EAAS,SAACA,EAAe4G,GAAhB,OACpBA,EAAIrH,QAAO,SAAAsH,GAAC,OAAK7G,EAAOP,MAAK,SAAAsH,GAAC,OAAIF,EAAErH,KAAOuH,EAAEvH,OAAOqH,MAGzCG,EAA2B,SAACtH,GAAD,MAAsB,CAC5DF,GAAIE,EAAKF,GACTyH,MAAOvH,EAAKwH,YAAcxH,EAAKwH,WAAWD,MAC1CE,OACGzH,EAAKwH,YACJxH,EAAKwH,WAAWE,SAChB1H,EAAKwH,WAAWE,QAAQC,KAAK,OAC/B,iBACFC,eACG5H,EAAKwH,YAAcxH,EAAKwH,WAAWK,gBACpC,IAAIC,MAAOC,cAAc5F,MAAM,KACjC6F,WACGhI,EAAKwH,YACJxH,EAAKwH,WAAWS,YAChBjI,EAAKwH,WAAWS,WAAWC,WAC7B,0CACFC,SAAUC,KAAKC,MAAMD,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,OAI5CC,EAAc,SAACC,EAAYvI,GAAb,sBACpBuI,EADoB,CACdL,SAAU,KADI,mBAEtBlI,KAGQwI,EAAiB,SAACD,EAAYvI,GAAb,OAC5BA,EAAMJ,QAAO,qBAAGC,KAAgB0I,EAAK1I,OAE1B4I,EAAmB,SAACF,EAAYvI,GAAb,OAC9BA,EAAM8C,KAAI,SAAAoE,GAAC,OACTA,EAAErH,KAAO0I,EAAK1I,GAAd,eAAwB0I,EAAxB,CAA8BL,SAAUhB,EAAEgB,SAAW,IAAMhB,MAGlDwB,EAAsB,SAACH,EAAYvI,GAAb,OACjCA,EAAM8C,KAAI,SAAAoE,GAAC,OACTA,EAAErH,KAAO0I,EAAK1I,GAAd,eAAwB0I,EAAxB,CAA8BL,SAAUhB,EAAEgB,SAAW,IAAMhB,MAelDyB,EAAgC,SAC3CC,EACAC,GAEA,OAAGD,IAAaE,IAAUC,MATqB,SAACF,GAAD,gCAC9CnC,IAAcsC,SAAW,CAACtC,IAAcuC,KAAMvC,IAAcuC,MAAMtG,SAASkG,IAD7B,cAE9CnC,IAAcwC,KAAO,CAACxC,IAAcuC,KAAMvC,IAAcuC,MAAMtG,SAASkG,IAFzB,EAUtCM,CAAkCN,GAfM,SAACA,GAAD,gCAChDnC,IAAcsC,SAAWH,IAAgBnC,IAAc0C,KADP,cAEhD1C,IAAcuC,KAAOJ,IAAgBnC,IAAc0C,KAFH,EAiB1CC,CAAoCR,K,gCCtEtC,IAAKlK,EAAZ,kC,SAAYA,K,wBAAAA,E,oBAAAA,E,0BAAAA,E,0BAAAA,E,6BAAAA,E,0BAAAA,M,sCCFL,IAAKA,EAAZ,kC,SAAYA,K,0BAAAA,E,gCAAAA,E,0BAAAA,E,gCAAAA,E,8BAAAA,E,2BAAAA,M,sCCEL,IAAKA,EAAZ,kC,SAAYA,K,aAAAA,E,kBAAAA,M,sCCFZ,6CAWa6D,EAAe,CAC1B,IAAK,CACHS,KAAM,QACNP,MAAO,CAACoG,IAAUC,MAAOD,IAAUQ,QACnCC,KAAM,iBAAM,MAEd,aAAc,CACZtG,KAAM,YACNP,MAAO,CAACoG,IAAUC,OAClBQ,KAAM,iBAAM,eAEd,aAAc,CACZtG,KAAM,YACNP,MAAO,CAACoG,IAAUQ,QAClBC,KAAM,iBAAM,eAEd,sBAAuB,CACrBtG,KAAM,YACNP,MAAO,CAACoG,IAAUQ,QAClBzG,OAAO,EACP0G,KAAM,SAACC,GAAD,2BAAmCA,KAE3C,SAAU,CACRvG,KAAM,YACNP,MAAO,CAACoG,IAAUC,OAClBQ,KAAM,iBAAM,WAEd,wBAAyB,CACvBtG,KAAM,YACNP,MAAO,CAACoG,IAAUC,MAAOD,IAAUQ,QACnCzG,OAAO,EACP0G,KAAM,SAACE,GAAD,uBAA8BA,EAA9B,aAER,iCAAkC,CAChCxG,KAAM,YACNP,MAAO,CAACoG,IAAUC,MAAOD,IAAUQ,QACnCzG,OAAO,EACP0G,KAAM,SAACE,EAAgBD,GAAjB,uBACMC,EADN,mBACuBD,KAE/B,UAAW,CACTvG,KAAM,SACNP,MAAO,CAACoG,IAAUC,MAAOD,IAAUQ,QACnCC,KAAM,iBAAM,c,gCCtDhB,uGAMa1H,EAAQ,WAEnB,OADW6H,aAAY,SAAClL,GAAD,OAAwBA,EAAM8B,OAY1CqJ,EAAY,WAAO,IACtBC,EATkB,WAC1B,IAAMC,EAAWC,cAEjB,MAAO,CACLF,QAASG,uBAAY,kBAAMF,EAASD,iBAAY,CAACC,KAK/BG,GAAZJ,QACAjI,EAASC,cAATD,KACRsI,qBAAU,WACRtI,EAAK,KACLiI,MACC,CAACA,EAASjI,M,gCCzBf,gFAEauI,EAAQ,SAAC5J,GAAD,MAAa,CAChC7B,KAAME,IAAY4B,IAClB7B,QAAS,CAAE4B,QAGAsJ,EAAU,iBAAO,CAC5BnL,KAAME,IAAY6B,S,mGCLd2J,EAAsB,kBAC1BC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,SAExCC,EAAoB,SAACpM,GAAD,OACxBkM,aAAaG,QAAQ,QAASL,KAAKM,UAAUtM,KAElCuM,EAAQ,uCAAG,sBAAAC,EAAA,sEAChBjE,YAAQ,KADQ,gCAEfwD,KAFe,2CAAH,qDAKRU,EAAS,uCAAG,WAAOzM,GAAP,iBAAAwM,EAAA,sEACjBjE,YAAQ,KADS,cAEjBmE,EAAaX,KAAyB,GACtCY,EAHiB,sBAGF3M,GAHE,YAGQ0M,IAC/BN,EAAkBO,GAJK,kBAKhBA,GALgB,2CAAH,sDAQTxH,EAAY,uCAAG,WAC1BE,EACAE,GAF0B,iBAAAiH,EAAA,sEAIpBjE,YAAQ,KAJY,UAKpBmE,EAAaX,KAAyB,KACtCa,EAAoBF,EAAWhL,MACnC,SAAAmL,GAAI,OAAIA,EAAKxH,WAAaA,GAAYwH,EAAKtH,WAAaA,MAPhC,yCAUjBqH,GAViB,aAYpB,IAAIE,MAAM,yBAZU,2CAAH,wD,QCjBnBC,EAAe,CACnB,CACEtL,GAAI,IACJoD,KAAM,SACNmI,QAAS,QACT3H,SAAU,OACVE,SAAU,YACVf,KAAMkG,IAAUC,OAElB,CACElJ,GAAI,IACJoD,KAAM,OACNmI,QAAS,OACT3H,SAAU,SACVE,SAAU,MACVf,KAAMkG,IAAUQ,SAIP1K,EAAW,SAACR,GAAD,MAAoB,CAC1CK,KAAME,IAAYC,SAClBF,QAAS,CAAEN,WAkBAU,EAAa,iBAAO,CAC/BL,KAAME,IAAYG,aAGPC,EAAW,SAACR,GAAD,MAA4B,CAClDE,KAAME,IAAYI,SAClBL,QAAS,CAAEH,kB,gBClDb,sGAQO,IAAM6E,EAAc,SAACiI,GAC1B,IAAMxB,EAAWC,cADkC,EAECJ,aAClD,SAAClL,GAAD,OAAwBA,EAAMJ,SADxBA,EAF2C,EAE3CA,MAAOC,EAFoC,EAEpCA,QAASC,EAF2B,EAE3BA,UAAWC,EAFgB,EAEhBA,aAUnC,OANA0L,qBAAU,WACH3L,IAAa+M,GAAgBhN,GAChCwL,EDqCqB,uCAAe,WAAMA,GAAN,iBAAAe,EAAA,6DACxCf,EAAS/K,KAD+B,kBAGlB6L,IAHkB,UAIzB,QADPvM,EAHgC,yCAKTyM,EAAUM,GALD,OAK9BG,EAL8B,OAMpCzB,EAASjL,EAAS0M,IANkB,QAQjClN,GACHyL,EAASjL,EAASR,IAEpByL,EAAS9K,KAX6B,kDAatCQ,QAAQC,IAAR,MACAqK,EAAS9K,KAd6B,0DAAf,yDCnCtB,CAACT,EAAWD,EAASgN,EAAYxB,IAE7B,CACLzL,QACAC,UACAC,YACAC,iBAIS8E,EAAkB,WAC7B,IAAMwG,EAAWC,cACTxJ,EAAOoJ,aAAY,SAAClL,GAAD,OAAwBA,EAAM8B,MAAjDA,GAF2B,EAGDoJ,aAChC,SAAClL,GAAD,OAAwBA,EAAMJ,SADxBG,EAH2B,EAG3BA,aAAcF,EAHa,EAGbA,QAatB,MAAO,CACLiF,cAVoBiI,mBAAQ,mBAAQjL,IAAI,CAACA,IAWzCiD,aATmBwG,uBACnB,SAACtG,EAAkBE,GACjBkG,ED4CyB,SAACpG,EAAkBE,GAAnB,8CAAkD,WAAMkG,GAAN,eAAAe,EAAA,6DAC/Ef,EAAS/K,KADsE,kBAG7CyE,EAAaE,EAAUE,GAHsB,OAGvEqH,EAHuE,OAI7EnB,EAASK,YAAMc,IACfnB,EAAS9K,KALoE,gDAO7EQ,QAAQC,IAAR,MACAqK,EAAS9K,EAAS,KAAEyM,UARyD,yDAAlD,sDC5ChBC,CAAgBhI,EAAUE,MAErC,CAACkG,IAMDtL,eACAF,YAISqN,EAAgB,WAAO,IAC1BpL,EAAOuB,cAAPvB,GACAqB,EAASC,cAATD,KAERsI,qBAAU,WACL3J,GAAMA,EAAGsC,OAASkG,IAAUC,OAC7BpH,EAAK,OAEN,CAACrB,EAAIqB,M,+BC5DH,IAAKhD,EASAmK,EATZ,oE,SAAYnK,K,0BAAAA,E,gCAAAA,E,gCAAAA,E,0BAAAA,E,8BAAAA,E,2BAAAA,M,cASAmK,K,cAAAA,E,iBAAAA,M","file":"static/js/main.a62dbba9.chunk.js","sourcesContent":["import { ReducerAction } from \"../store\";\nimport { ActionTypes, UsersReducer } from \"./types\";\n\nconst initialState = {\n  users: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: \"\"\n};\n\nconst users = (\n  state = initialState as UsersReducer,\n  { type, payload }: ReducerAction\n): UsersReducer => {\n  switch (type) {\n    case ActionTypes.setUsers: {\n      return { ...state, users: payload.users };\n    }\n    case ActionTypes.addUsers: {\n      return { ...state, users: [...payload.users, ...state.users] };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return {\n        ...state,\n        errorMessage: (payload && payload.errorMessage) || \"\",\n        loading: false,\n        hasLoaded: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from \"../store\";\nimport { OrdersReducer, ActionTypes } from \"./types\";\nimport { replace } from \"../helpers\";\n\nconst initialState = {\n  orders: [],\n  loading: false,\n  hasLoaded: false\n};\n\nconst reducer = (\n  state = initialState as OrdersReducer,\n  { type, payload }: ReducerAction\n): OrdersReducer => {\n  switch (type) {\n    case ActionTypes.setOrders:\n      return { ...state, orders: payload.orders };\n    case ActionTypes.updateOrders:\n      return { ...state, orders: replace(payload.orders, state.orders) };\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from \"../store\";\nimport { ActionTypes, BooksReducer, Book } from \"./types\";\nimport { replace } from \"../helpers\";\n\nconst initialState = {\n  books: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: \"\"\n};\n\nconst users = (\n  state = initialState as BooksReducer,\n  { type, payload }: ReducerAction\n): BooksReducer => {\n  switch (type) {\n    case ActionTypes.setBooks: {\n      console.log(payload);\n      return { ...state, books: payload.books };\n    }\n    case ActionTypes.addBooks: {\n      return { ...state, books: [...payload.books, ...state.books] };\n    }\n    case ActionTypes.updateBooks: {\n      return { ...state, books: replace(payload.books, state.books) };\n    }\n    case ActionTypes.deleteBooks: {\n      return {\n        ...state,\n        books: state.books.filter(({ id }) =>\n          !payload.books.find((book: Book) => book.id === id)\n        )\n      };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from \"../store\";\nimport { ActionTypes, CartReducer } from \"./types\";\nimport { replace, remove } from \"../helpers\";\n\nconst initialState = {\n  items: [],\n  loading: false,\n  hasLoaded: false\n};\n\nconst reducer = (\n  state = initialState as CartReducer,\n  { type, payload }: ReducerAction\n): CartReducer => {\n  switch (type) {\n    case ActionTypes.setItems: {\n      return { ...state, items: payload.items };\n    }\n    case ActionTypes.addItems: {\n      return { ...state, items: [...payload.items, ...state.items]}\n    }\n    case ActionTypes.updateItems: {\n      return { ...state, items: replace(payload.items, state.items)}\n    }\n    case ActionTypes.removeItems: {\n      return { ...state, items: remove(payload.items, state.items)}\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from \"../store\";\nimport { MeReducer, ActionTypes } from \"./types\";\n\nconst initialState = {\n  me: null,\n  loading: false,\n  hasLoaded: false\n};\n\nconst reducer = (\n  state = initialState as MeReducer,\n  { type, payload }: ReducerAction\n): MeReducer => {\n  switch (type) {\n    case ActionTypes.set: {\n      return { ...state, me: payload.me };\n    }\n    case ActionTypes.clear: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport users from \"./users/reducer\";\nimport orders from \"./orders/reducer\";\nimport books from \"./books/reducer\";\nimport cartItems from './cart/reducer'\nimport me from './me/reducer'\n\nconst rootReducer = combineReducers({\n  users,\n  orders,\n  books,\n  cartItems,\n  me,\n});\n\nexport default rootReducer;\n\nexport type RootReducer = ReturnType<typeof rootReducer>;\n","import { configureStore, getDefaultMiddleware, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer, { RootReducer } from './rootReducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['me']\n}\n\nconst reducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: false\n  })\n})\n\nexport default store\n\nexport const persistor = persistStore(store)\n\nexport type AppThunk = ThunkAction<void, RootReducer, null, Action<string>>\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type ReducerAction = {\n  type: String,\n  payload: any\n}\n","import React from \"react\";\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\nimport { useLocation, useHistory } from \"react-router\";\nimport { useMe } from \"../reducers/me/hooks\";\nimport { pages } from \"../routes\";\n\nconst Nav = () => {\n  const { pathname } = useLocation();\n  const { push } = useHistory();\n  const { me } = useMe();\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) =>\n    push(newValue);\n  if (!me) {\n    return null;\n  }\n  return (\n    <AppBar>\n      <Tabs variant=\"scrollable\" value={`/${pathname.split(\"/\")[1]}` || \"/\"} onChange={handleChange}>\n        {Object.keys(pages)\n          .filter(k => pages[k].roles.includes(me.role) && !pages[k].noNav)\n          .map(k => (\n            <Tab key={k} value={k} label={pages[k].name} />\n          ))}\n      </Tabs>\n    </AppBar>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from \"react\";\nimport { useAuthenticate, useGetUsers } from \"../reducers/users/hooks\";\nimport {\n  Backdrop,\n  CircularProgress,\n  TextField,\n  Button,\n  Typography\n} from \"@material-ui/core\";\n\nconst Authentication: React.FC<{ children: React.ReactNode }> = ({\n  children\n}) => {\n  useGetUsers();\n  const {\n    authenticated,\n    authenticate,\n    errorMessage,\n    loading\n  } = useAuthenticate();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    authenticate(username, password);\n  };\n  if (authenticated) {\n    return <div>{children}</div>;\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <Backdrop open={!!loading}>\n        <CircularProgress />\n      </Backdrop>\n      <TextField\n        type=\"text\"\n        label=\"Username\"\n        fullWidth\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <TextField\n        type=\"password\"\n        label=\"Password\"\n        fullWidth\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <Button type=\"submit\">Login</Button>\n\n      {errorMessage && (\n        <Typography variant=\"h5\" color=\"error\">\n          {errorMessage}\n        </Typography>\n      )}\n    </form>\n  );\n};\n\nexport default Authentication;\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { CircularProgress, Container, Toolbar } from \"@material-ui/core\";\n\nimport store, { persistor } from \"./reducers/store\";\n\nimport Nav from \"./components/Nav\";\nimport Authentication from \"./pages/Authentication\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nconst HomePage = lazy(() => import(\"./pages/HomePage\"));\nconst UsersPage = lazy(() => import(\"./pages/UsersPage\"));\nconst LogoutPage = lazy(() => import(\"./pages/Logout\"));\nconst MyOrders = lazy(() => import(\"./pages/MyOrders\"));\nconst OrderPage = lazy(() => import(\"./pages/OrderPage\"));\nconst UserOrders = lazy(() => import(\"./pages/UserOrders\"));\nconst AdminOrderPage = lazy(() => import(\"./pages/AdminOrderPage\"));\nconst AdminBookList = lazy(() => import(\"./pages/AdminBookList\"));\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Container>\n          <Router>\n            <Authentication>\n              <Nav />\n              <Toolbar />\n              <Suspense fallback={<CircularProgress />}>\n                <Switch>\n                  <Route path=\"/\" exact component={HomePage} />\n                  <Route path=\"/book-list\" exact component={AdminBookList} />\n                  <Route path=\"/users\" exact component={UsersPage} />\n                  <Route path=\"/users/:userId/orders\" exact component={UserOrders} />\n                  <Route path=\"/users/:userId/orders/:orderId\" exact component={AdminOrderPage} />\n                  <Route path=\"/logout\" exact component={LogoutPage} />\n                  <Route path=\"/my-orders\" exact component={MyOrders} />\n                  <Route path=\"/my-orders/:orderId\" exact component={OrderPage} />\n                </Switch>\n              </Suspense>\n            </Authentication>\n          </Router>\n        </Container>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum ActionTypes {\n  setOrders = \"orders/setOrders\",\n  updateOrders = \"oders/updateOrds\",\n  fetchStart = \"orders/fetchStart\",\n  fetchEnd = \"orders/fetchEnd\"\n}\n\nexport enum orderStatuses {\n  new = \"new\",\n  paid = \"paid\",\n  sent = \"sent\",\n  canceled = \"canceled\"\n}\n\nexport interface Order {\n  id: string;\n  buyer: {\n    id: string;\n    name: string;\n    surname: string;\n    username: string;\n  };\n  status: orderStatuses;\n  items: any[];\n}\n\nexport interface OrdersReducer {\n  orders: Order[];\n  loading: Boolean;\n  hasLoaded: Boolean;\n}\n","import { Item } from \"./cart/types\";\nimport { Book } from \"./books/types\";\nimport { UserRoles } from \"./users/types\";\nimport { orderStatuses } from \"./orders/types\";\n\nexport const timeout = (delay: number) =>\n  new Promise(resolve => setTimeout(resolve, delay));\n\nexport const exists = (id: any, arr: any[]) => arr.find(v => v.id === id);\nexport const replace = (updated: any[], arr: any[]) =>\n  arr.map(v => updated.find(u => v.id === u.id) || v);\nexport const remove = (remove: any[], arr: any[]) =>\n  arr.filter(v => !remove.find(u => v.id === u.id) || v);\n\n// books\nexport const transformGoogleBookToApi = (book: any): Book => ({\n  id: book.id,\n  title: book.volumeInfo && book.volumeInfo.title,\n  author:\n    (book.volumeInfo &&\n      book.volumeInfo.authors &&\n      book.volumeInfo.authors.join(\", \")) ||\n    \"Unknown Author\",\n  published_date:\n    (book.volumeInfo && book.volumeInfo.publishedDate) ||\n    new Date().toISOString().split('T'),\n  book_cover:\n    (book.volumeInfo &&\n      book.volumeInfo.imageLinks &&\n      book.volumeInfo.imageLinks.thumbnail) ||\n    \"https://via.placeholder.com/150x150.png\",\n  quantity: Math.floor(Math.floor(Math.random() * 100) % 100)\n});\n\n// cart items\nexport const addCartItem = (item: Item, items: Item[]) => [\n  { ...item, quantity: 1 },\n  ...items\n];\n\nexport const removeCartItem = (item: Item, items: Item[]) =>\n  items.filter(({ id }) => id !== item.id);\n\nexport const addCartItemCount = (item: Item, items: Item[]) =>\n  items.map(v =>\n    v.id === item.id ? { ...item, quantity: v.quantity + 1 } : v\n  );\n\nexport const removeCartItemCount = (item: Item, items: Item[]) =>\n  items.map(v =>\n    v.id === item.id ? { ...item, quantity: v.quantity - 1 } : v\n  );\n\n// order rights\n\nexport const getClientAllowedOrdersStatusChanges = (orderStatus: orderStatuses) => ({\n  [orderStatuses.canceled]: orderStatus === orderStatuses.new,\n  [orderStatuses.paid]: orderStatus === orderStatuses.new,\n})\n\nexport const getAdminAllowedOrderStatusChanges = (orderStatus: orderStatuses) => ({\n  [orderStatuses.canceled]: [orderStatuses.paid, orderStatuses.paid].includes(orderStatus),\n  [orderStatuses.sent]: [orderStatuses.paid, orderStatuses.paid].includes(orderStatus),\n})\n\nexport const getAllowedOrdersStatusChanges = (\n  userRole: UserRoles,\n  orderStatus: orderStatuses\n) => {\n  if(userRole === UserRoles.admin) {\n    return getAdminAllowedOrderStatusChanges(orderStatus)\n  }\n  return getClientAllowedOrdersStatusChanges(orderStatus)\n}\n","import { Book } from \"../books/types\";\n\nexport enum ActionTypes {\n  setItems = 'cart/setCart',\n  addItems = 'cart/add',\n  removeItems = 'cart/remove',\n  updateItems = 'cart/update',\n  fetchStart = \"cart/fetchStart\",\n  fetchEnd = \"cart/fetchEnd\"\n}\n\nexport interface Item extends Book {}\n\nexport interface CartItems {\n  userId: String,\n  items: Item[],\n}\n\nexport interface CartReducer {\n  items: Item[];\n  loading: Boolean;\n  hasLoaded: Boolean;\n}\n","export enum ActionTypes {\n  setBooks = \"books/setBooks\",\n  updateBooks = \"books/updateBooks\",\n  addBooks = 'books/addBooks',\n  deleteBooks = 'books/deleteBooks',\n  fetchStart = \"books/fetchStart\",\n  fetchEnd = \"books/fetchEnd\"\n}\n\nexport interface Book {\n  id: string;\n  title: string;\n  author: string;\n  published_date: string;\n  book_cover: string;\n  quantity: number;\n}\n\nexport interface BooksReducer {\n  books: Book[];\n  loading: Boolean;\n  hasLoaded: Boolean;\n  errorMessage: string;\n}\n","import { User } from \"../users/types\";\n\nexport enum ActionTypes {\n  set = \"me/set\",\n  clear = \"me/clear\"\n}\n\nexport interface Me extends User {}\n\nexport interface MeReducer {\n  me: Me | null;\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","import { UserRoles } from \"./reducers/users/types\";\n\nexport interface pages {\n  [path: string]: {\n    name: string;\n    roles: string[];\n    href: Function;\n    noNav?: boolean;\n  };\n}\n\nexport const pages: pages = {\n  \"/\": {\n    name: \"Books\",\n    roles: [UserRoles.admin, UserRoles.client],\n    href: () => \"/\"\n  },\n  \"/book-list\": {\n    name: \"Book List\",\n    roles: [UserRoles.admin],\n    href: () => \"/book-list\"\n  },\n  \"/my-orders\": {\n    name: \"My Orders\",\n    roles: [UserRoles.client],\n    href: () => \"/my-orders\"\n  },\n  \"/my-orders/:orderId\": {\n    name: \"My Orders\",\n    roles: [UserRoles.client],\n    noNav: true,\n    href: (orderId: string) => `/my-orders/${orderId}`\n  },\n  \"/users\": {\n    name: \"User List\",\n    roles: [UserRoles.admin],\n    href: () => \"/users\"\n  },\n  \"/users/:userId/orders\": {\n    name: \"My Orders\",\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string) => `/users/${userId}/orders`\n  },\n  \"/users/:userId/orders/:orderId\": {\n    name: \"My Orders\",\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string, orderId: string) =>\n      `/users/${userId}/orders/${orderId}`\n  },\n  \"/logout\": {\n    name: \"Logout\",\n    roles: [UserRoles.admin, UserRoles.client],\n    href: () => \"/logout\"\n  }\n};\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { RootReducer } from \"../rootReducer\";\nimport { useCallback, useEffect } from \"react\";\nimport { clearMe } from \"./actions\";\nimport { useHistory } from \"react-router\";\n\nexport const useMe = () => {\n  const me = useSelector((state: RootReducer) => state.me);\n  return me;\n};\n\nexport const useMeActions = () => {\n  const dispatch = useDispatch();\n\n  return {\n    clearMe: useCallback(() => dispatch(clearMe()), [dispatch])\n  };\n};\n\nexport const useLogout = () => {\n  const { clearMe } = useMeActions();\n  const { push } = useHistory();\n  useEffect(() => {\n    push(\"/\");\n    clearMe();\n  }, [clearMe, push]);\n};\n","import { Me, ActionTypes } from \"./types\";\n\nexport const setMe = (me: Me) => ({\n  type: ActionTypes.set,\n  payload: { me }\n});\n\nexport const clearMe = () => ({\n  type: ActionTypes.clear\n});\n","import { User } from \"./types\";\nimport { timeout } from \"../helpers\";\n\nconst getUsersFromStorage = (): User[] | null =>\n  JSON.parse(localStorage.getItem(\"users\") || 'null');\n\nconst setUsersToStorage = (users: User[]) =>\n  localStorage.setItem(\"users\", JSON.stringify(users));\n\nexport const getUsers = async (): Promise<User[] | null> => {\n  await timeout(1000);\n  return getUsersFromStorage();\n};\n\nexport const postUsers = async (users: User[]) => {\n  await timeout(1000);\n  const savedUsers = getUsersFromStorage() || [];\n  const allUsers = [...users, ...savedUsers];\n  setUsersToStorage(allUsers);\n  return allUsers;\n};\n\nexport const authenticate = async (\n  username: string,\n  password: string\n): Promise<User> => {\n  await timeout(1000);\n  const savedUsers = getUsersFromStorage() || [];\n  const authenticatedUser = savedUsers.find(\n    user => user.username === username && user.password === password\n  );\n  if (authenticatedUser) {\n    return authenticatedUser;\n  }\n  throw new Error(\"Incorrect credentials\");\n};\n","import { User, ActionTypes, UserRoles } from \"./types\";\nimport { AppThunk } from '../store';\nimport { getUsers, postUsers, authenticate } from \"./requests\";\nimport { setMe } from \"../me/actions\";\n\nconst initialUsers = [\n  {\n    id: \"1\",\n    name: \"Yagami\",\n    surname: \"Light\",\n    username: \"Kira\",\n    password: \"DeathNode\",\n    role: UserRoles.admin\n  },\n  {\n    id: \"2\",\n    name: \"User\",\n    surname: \"Some\",\n    username: \"simple\",\n    password: \"123\",\n    role: UserRoles.client\n  }\n]\n\nexport const setUsers = (users: User[]) => ({\n  type: ActionTypes.setUsers,\n  payload: { users }\n})\n\nexport const updateUsers = (users: User[]) => ({\n  type: ActionTypes.updateUsers,\n  payload: { users }\n})\n\nexport const removeUsers = (ids: [String]) => ({\n  type: ActionTypes.removeUsers,\n  payload: { ids }\n})\n\nexport const addUsers = (users: User[]) => ({\n  type: ActionTypes.addUsers,\n  payload: { users }\n})\n\nexport const fetchStart = () => ({\n  type: ActionTypes.fetchStart\n})\n\nexport const fetchEnd = (errorMessage?: string) => ({\n  type: ActionTypes.fetchEnd,\n  payload: { errorMessage }\n})\n\nexport const apiGetUsers = ():AppThunk => async dispatch => {\n  dispatch(fetchStart())\n  try {\n    const users = await getUsers()\n    if(users === null) {\n      const createdUsers = await postUsers(initialUsers)\n      dispatch(setUsers(createdUsers))\n    }\n    if(!!users) {\n      dispatch(setUsers(users))\n    }\n    dispatch(fetchEnd())\n  } catch (e) {\n    console.log(e)\n    dispatch(fetchEnd())\n  }\n}\n\nexport const apiCreateUsers = (users: User[]):AppThunk => async dispatch => {\n  dispatch(fetchStart)\n  try {\n    const createdUsers = await postUsers(users)\n    dispatch(addUsers(createdUsers))\n    dispatch(fetchEnd())\n  } catch (e) {\n    console.log(e)\n    dispatch(fetchEnd())\n  }\n}\n\nexport const apiAuthenticate = (username: string, password: string): AppThunk => async dispatch => {\n  dispatch(fetchStart())\n  try {\n    const authenticatedUser = await authenticate(username, password)\n    dispatch(setMe(authenticatedUser))\n    dispatch(fetchEnd())\n  } catch (e) {\n    console.log(e)\n    dispatch(fetchEnd(e.message))\n  }\n}","import { useEffect, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootReducer } from \"../rootReducer\";\nimport { apiAuthenticate, apiGetUsers } from \"./actions\";\nimport { useHistory } from \"react-router\";\nimport { useMe } from \"../me/hooks\";\nimport { UserRoles } from \"./types\";\n\nexport const useGetUsers = (forceFetch?: boolean) => {\n  const dispatch = useDispatch();\n  const { users, loading, hasLoaded, errorMessage } = useSelector(\n    (state: RootReducer) => state.users\n  );\n\n  useEffect(() => {\n    if((!hasLoaded || forceFetch) && !loading) {\n      dispatch(apiGetUsers())\n    }\n  }, [hasLoaded, loading, forceFetch, dispatch])\n\n  return {\n    users,\n    loading,\n    hasLoaded,\n    errorMessage\n  }\n}\n\nexport const useAuthenticate = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state: RootReducer) => state.me);\n  const { errorMessage, loading } = useSelector(\n    (state: RootReducer) => state.users\n  );\n\n  const authenticated = useMemo(() => !!me, [me]);\n\n  const authenticate = useCallback(\n    (username: string, password: string) => {\n      dispatch(apiAuthenticate(username, password));\n    },\n    [dispatch]\n  );\n\n  return {\n    authenticated,\n    authenticate,\n    errorMessage,\n    loading\n  };\n};\n\nexport const useAllowAdmin = () => {\n  const { me } = useMe()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    if(me && me.role !== UserRoles.admin) {\n      push('/')\n    }\n  }, [me, push])\n}\n","export enum ActionTypes {\n  setUsers = \"users/setUsers\",\n  updateUsers = \"users/updateUsers\",\n  removeUsers = \"users/removeUsers\",\n  addUsers = \"users/addUsers\",\n  fetchStart = \"users/fetchStart\",\n  fetchEnd = \"users/fetchEnd\"\n}\n\nexport enum UserRoles {\n  admin = \"admin\",\n  client = \"client\"\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  surname: string;\n  username: string;\n  password: string;\n  role: UserRoles;\n}\n\nexport interface UsersReducer {\n  users: User[];\n  loading: Boolean;\n  hasLoaded: Boolean;\n  errorMessage: string | '';\n}\n"],"sourceRoot":""}
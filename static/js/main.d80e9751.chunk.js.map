{"version":3,"sources":["reducers/users/reducer.ts","reducers/orders/reducer.ts","reducers/books/reducer.ts","reducers/cart/reducer.ts","reducers/me/reducer.ts","reducers/rootReducer.ts","reducers/store.ts","components/Nav.tsx","pages/Authentication.tsx","App.tsx","serviceWorker.ts","index.tsx","reducers/orders/types.ts","reducers/helpers.ts","reducers/cart/types.ts","reducers/books/types.ts","reducers/me/types.ts","routes.ts","reducers/me/hooks.ts","reducers/me/actions.ts","reducers/users/crud.ts","reducers/users/actions.ts","reducers/users/hooks.ts","reducers/users/types.ts"],"names":["initialState","users","loading","hasLoaded","errorMessage","state","type","payload","ActionTypes","setUsers","addUsers","fetchStart","fetchEnd","orders","reducer","setOrders","updateOrders","replace","books","setBooks","addBooks","updateBooks","deleteBooks","filter","id","find","book","items","setItems","addItems","updateItems","removeItems","remove","me","set","clear","rootReducer","combineReducers","cartItems","persistConfig","key","storage","whitelist","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","Nav","pathname","useLocation","push","useHistory","useMe","AppBar","Tabs","variant","value","split","onChange","event","newValue","Object","keys","pages","k","roles","includes","role","noNav","map","Tab","label","name","Authentication","children","useGetUsers","useAuthenticate","authenticated","authenticate","useState","username","setUsername","password","setPassword","onSubmit","e","preventDefault","Backdrop","open","CircularProgress","TextField","fullWidth","target","disabled","required","Button","Typography","color","HomePage","lazy","UsersPage","LogoutPage","MyOrders","OrderPage","UserOrders","AdminOrderPage","AdminBookList","App","Container","Toolbar","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","orderStatuses","timeout","delay","Promise","resolve","setTimeout","exists","arr","v","updated","u","getBooksFromGoogle","a","fetch","result","json","transformGoogleBookToApi","title","volumeInfo","author","authors","join","published_date","publishedDate","Date","toISOString","book_cover","imageLinks","thumbnail","quantity","Math","floor","random","getGoogleBooksToApi","booksFromGoogle","transformedBooks","addCartItem","item","removeCartItem","addCartItemCount","removeCartItemCount","getAllowedOrdersStatusChanges","userRole","orderStatus","UserRoles","admin","canceled","paid","sent","getAdminAllowedOrderStatusChanges","new","getClientAllowedOrdersStatusChanges","cachedStorage","defaultValue","data","get","JSON","parse","localStorage","getItem","getFromStorage","setItem","stringify","setToStorage","requiredAdmin","f","Error","rest","crud","storageKey","getItems","createItem","_item","uuid","_itemsStorage","createItems","newItems","_items","_newItems","reduce","acc","updateItem","updatedItems","deleteItem","bookId","_book","deleteItems","ids","deletedItems","_keys","client","href","orderId","userId","useSelector","useLogout","clearMe","dispatch","useDispatch","useCallback","useMeActions","useEffect","setMe","getUsers","postUsers","savedUsers","authenticatedUser","user","initialUsers","surname","forceFetch","length","createdUsers","console","log","useMemo","message","apiAuthenticate","useAllowAdmin"],"mappings":"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","file":"static/js/main.d80e9751.chunk.js","sourcesContent":["import { ReducerAction } from '../store';\nimport { ActionTypes, UsersReducer } from './types';\n\nconst initialState = {\n  users: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: '',\n};\n\nconst users = (state = initialState as UsersReducer, { type, payload }: ReducerAction): UsersReducer => {\n  switch (type) {\n    case ActionTypes.setUsers: {\n      return { ...state, users: payload.users };\n    }\n    case ActionTypes.addUsers: {\n      return { ...state, users: [...payload.users, ...state.users] };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return {\n        ...state,\n        errorMessage: (payload && payload.errorMessage) || '',\n        loading: false,\n        hasLoaded: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from '../store';\nimport { OrdersReducer, ActionTypes } from './types';\nimport { replace } from '../helpers';\n\nconst initialState = {\n  orders: [],\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as OrdersReducer, { type, payload }: ReducerAction): OrdersReducer => {\n  switch (type) {\n    case ActionTypes.setOrders:\n      return { ...state, orders: payload.orders };\n    case ActionTypes.updateOrders:\n      return { ...state, orders: replace(payload.orders, state.orders) };\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from '../store';\nimport { ActionTypes, BooksReducer, Book } from './types';\nimport { replace } from '../helpers';\n\nconst initialState = {\n  books: [],\n  loading: false,\n  hasLoaded: false,\n  errorMessage: '',\n};\n\nconst users = (state = initialState as BooksReducer, { type, payload }: ReducerAction): BooksReducer => {\n  switch (type) {\n    case ActionTypes.setBooks: {\n      return { ...state, books: payload.books };\n    }\n    case ActionTypes.addBooks: {\n      return { ...state, books: [...payload.books, ...state.books] };\n    }\n    case ActionTypes.updateBooks: {\n      return { ...state, books: replace(payload.books, state.books) };\n    }\n    case ActionTypes.deleteBooks: {\n      return {\n        ...state,\n        books: state.books.filter(({ id }) => !payload.books.find((book: Book) => book.id === id)),\n      };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","import { ReducerAction } from '../store';\nimport { ActionTypes, CartReducer } from './types';\nimport { replace, remove } from '../helpers';\n\nconst initialState = {\n  items: [],\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as CartReducer, { type, payload }: ReducerAction): CartReducer => {\n  switch (type) {\n    case ActionTypes.setItems: {\n      return { ...state, items: payload.items };\n    }\n    case ActionTypes.addItems: {\n      return { ...state, items: [...payload.items, ...state.items] };\n    }\n    case ActionTypes.updateItems: {\n      return { ...state, items: replace(payload.items, state.items) };\n    }\n    case ActionTypes.removeItems: {\n      return { ...state, items: remove(payload.items, state.items) };\n    }\n    case ActionTypes.fetchStart:\n      return { ...state, loading: true };\n    case ActionTypes.fetchEnd:\n      return { ...state, loading: false, hasLoaded: true };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ReducerAction } from '../store';\nimport { MeReducer, ActionTypes } from './types';\n\nconst initialState = {\n  me: null,\n  loading: false,\n  hasLoaded: false,\n};\n\nconst reducer = (state = initialState as MeReducer, { type, payload }: ReducerAction): MeReducer => {\n  switch (type) {\n    case ActionTypes.set: {\n      return { ...state, me: payload.me };\n    }\n    case ActionTypes.clear: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport users from './users/reducer';\nimport orders from './orders/reducer';\nimport books from './books/reducer';\nimport cartItems from './cart/reducer';\nimport me from './me/reducer';\n\nconst rootReducer = combineReducers({\n  users,\n  orders,\n  books,\n  cartItems,\n  me,\n});\n\nexport default rootReducer;\n\nexport type RootReducer = ReturnType<typeof rootReducer>;\n","import { configureStore, getDefaultMiddleware, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer, { RootReducer } from './rootReducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['me'],\n};\n\nconst reducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppThunk = ThunkAction<void, RootReducer, null, Action<string>>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type ReducerAction = {\n  type: string;\n  payload: any; // eslint-disable-line\n};\n","import React from 'react';\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\nimport { useLocation, useHistory } from 'react-router';\nimport { useMe } from '../reducers/me/hooks';\nimport { pages } from '../routes';\n\nconst Nav = () => {\n  const { pathname } = useLocation();\n  const { push } = useHistory();\n  const { me } = useMe();\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => push(newValue);\n  if (!me) {\n    return null;\n  }\n  return (\n    <AppBar>\n      <Tabs variant=\"scrollable\" value={`/${pathname.split('/')[1]}` || '/'} onChange={handleChange}>\n        {Object.keys(pages)\n          .filter(k => pages[k].roles.includes(me.role) && !pages[k].noNav)\n          .map(k => (\n            <Tab key={k} value={k} label={pages[k].name} />\n          ))}\n      </Tabs>\n    </AppBar>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport { useAuthenticate, useGetUsers } from '../reducers/users/hooks';\nimport { Backdrop, CircularProgress, TextField, Button, Typography } from '@material-ui/core';\n\nconst Authentication = ({ children }: { children: React.ReactNode }) => {\n  useGetUsers();\n  const { authenticated, authenticate, errorMessage, loading } = useAuthenticate();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    authenticate(username, password);\n  };\n  if (authenticated) {\n    return <div>{children}</div>;\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <Backdrop open={!!loading}>\n        <CircularProgress />\n      </Backdrop>\n      <TextField\n        type=\"text\"\n        label=\"Username\"\n        fullWidth\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <TextField\n        type=\"password\"\n        label=\"Password\"\n        fullWidth\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        disabled={!!loading}\n        required\n      />\n\n      <Button type=\"submit\">Login</Button>\n\n      {errorMessage && (\n        <Typography variant=\"h5\" color=\"error\">\n          {errorMessage}\n        </Typography>\n      )}\n    </form>\n  );\n};\n\nexport default Authentication;\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { CircularProgress, Container, Toolbar } from '@material-ui/core';\n\nimport store, { persistor } from './reducers/store';\n\nimport Nav from './components/Nav';\nimport Authentication from './pages/Authentication';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst HomePage = lazy(() => import('./pages/HomePage'));\nconst UsersPage = lazy(() => import('./pages/UsersPage'));\nconst LogoutPage = lazy(() => import('./pages/Logout'));\nconst MyOrders = lazy(() => import('./pages/MyOrders'));\nconst OrderPage = lazy(() => import('./pages/OrderPage'));\nconst UserOrders = lazy(() => import('./pages/UserOrders'));\nconst AdminOrderPage = lazy(() => import('./pages/AdminOrderPage'));\nconst AdminBookList = lazy(() => import('./pages/AdminBookList'));\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Container>\n          <Router>\n            <Authentication>\n              <Nav />\n              <Toolbar />\n              <Suspense fallback={<CircularProgress />}>\n                <Switch>\n                  <Route path=\"/\" exact component={HomePage} />\n                  <Route path=\"/book-list\" exact component={AdminBookList} />\n                  <Route path=\"/users\" exact component={UsersPage} />\n                  <Route path=\"/users/:userId/orders\" exact component={UserOrders} />\n                  <Route path=\"/users/:userId/orders/:orderId\" exact component={AdminOrderPage} />\n                  <Route path=\"/logout\" exact component={LogoutPage} />\n                  <Route path=\"/my-orders\" exact component={MyOrders} />\n                  <Route path=\"/my-orders/:orderId\" exact component={OrderPage} />\n                </Switch>\n              </Suspense>\n            </Authentication>\n          </Router>\n        </Container>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\nexport enum ActionTypes {\n  setOrders = 'orders/setOrders',\n  updateOrders = 'oders/updateOrds',\n  fetchStart = 'orders/fetchStart',\n  fetchEnd = 'orders/fetchEnd',\n}\n\nexport enum orderStatuses {\n  new = 'new',\n  paid = 'paid',\n  sent = 'sent',\n  canceled = 'canceled',\n}\n\nexport interface Order {\n  id: string;\n  buyer: {\n    id: string;\n    name: string;\n    surname: string;\n    username: string;\n  };\n  status: orderStatuses;\n  items: any[];\n}\n\nexport interface OrdersReducer {\n  orders: Order[];\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","import { Item } from './cart/types';\nimport { BookFormFields } from './books/types';\nimport { UserRoles } from './users/types';\nimport { orderStatuses } from './orders/types';\nimport { Me } from './me/types';\nimport { uuid } from 'uuidv4';\n\n/*eslint-disable */\nexport const timeout = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport const exists = (id: any, arr: any[]) => arr.find(v => v.id === id);\nexport const replace = (updated: any[], arr: any[]) => arr.map(v => updated.find(u => v.id === u.id) || v);\nexport const remove = (remove: any[], arr: any[]) => arr.filter(v => !remove.find(u => v.id === u.id) || v);\n\n// books\nexport const getBooksFromGoogle = async (): Promise<{ items: any[] }> => {\n  const result = await fetch(`https://www.googleapis.com/books/v1/volumes?q=book`);\n  return await result.json();\n};\n\nexport const transformGoogleBookToApi = (book: any): BookFormFields => ({\n  title: book.volumeInfo && book.volumeInfo.title,\n  author: (book.volumeInfo && book.volumeInfo.authors && book.volumeInfo.authors.join(', ')) || 'Unknown Author',\n  published_date: (book.volumeInfo && book.volumeInfo.publishedDate) || new Date().toISOString().split('T'),\n  book_cover:\n    (book.volumeInfo && book.volumeInfo.imageLinks && book.volumeInfo.imageLinks.thumbnail) ||\n    'https://via.placeholder.com/150x150.png',\n  quantity: Math.floor(Math.floor(Math.random() * 100) % 100),\n});\n\nexport const getGoogleBooksToApi = async (): Promise<BookFormFields[]> => {\n  const booksFromGoogle = getBooksFromGoogle();\n  const transformedBooks = (await booksFromGoogle).items.map(book => transformGoogleBookToApi(book));\n  return transformedBooks;\n};\n\n// cart items\nexport const addCartItem = (item: Item, items: Item[]) => [{ ...item, quantity: 1 }, ...items];\n\nexport const removeCartItem = (item: Item, items: Item[]) => items.filter(({ id }) => id !== item.id);\n\nexport const addCartItemCount = (item: Item, items: Item[]) =>\n  items.map(v => (v.id === item.id ? { ...item, quantity: v.quantity + 1 } : v));\n\nexport const removeCartItemCount = (item: Item, items: Item[]) =>\n  items.map(v => (v.id === item.id ? { ...item, quantity: v.quantity - 1 } : v));\n\n// order rights\n\nexport const getClientAllowedOrdersStatusChanges = (orderStatus: orderStatuses) => ({\n  [orderStatuses.canceled]: orderStatus === orderStatuses.new,\n  [orderStatuses.paid]: orderStatus === orderStatuses.new,\n});\n\nexport const getAdminAllowedOrderStatusChanges = (orderStatus: orderStatuses) => ({\n  [orderStatuses.canceled]: [orderStatuses.paid, orderStatuses.paid].includes(orderStatus),\n  [orderStatuses.sent]: [orderStatuses.paid, orderStatuses.paid].includes(orderStatus),\n});\n\nexport const getAllowedOrdersStatusChanges = (userRole: UserRoles, orderStatus: orderStatuses) => {\n  if (userRole === UserRoles.admin) {\n    return getAdminAllowedOrderStatusChanges(orderStatus);\n  }\n  return getClientAllowedOrdersStatusChanges(orderStatus);\n};\n/*eslint-enable */\n\nexport const getFromStorage = (key: string, defaultValue: any) =>\n  JSON.parse(localStorage.getItem(key) || `${defaultValue}`);\n\nexport const setToStorage = (key: string, value: any) => localStorage.setItem(key, JSON.stringify(value));\n\nexport const cachedStorage = <S, G>(key: string, defaultValue: string) => {\n  let data: any = null;\n  const handleSetToStorage = (value: S) => {\n    data = value;\n    setToStorage(key, value);\n  };\n  const handleGetFromStorage = (): G => {\n    if (data) {\n      return data;\n    }\n    data = getFromStorage(key, defaultValue);\n    return data;\n  };\n  return {\n    get: handleGetFromStorage,\n    set: handleSetToStorage,\n  };\n};\n\nexport const requiredAdmin = (f: Function) => async (me: Me, ...rest: any) => {\n  if (me.role !== UserRoles.admin) {\n    throw new Error('You are not allowed to excute this request');\n  }\n  return f(...rest);\n};\n\ninterface BaseItem {\n  id?: string;\n}\n\nexport const crud = <ItemType extends BaseItem>(storageKey: string) => {\n  interface StorageItems {\n    [k: string]: ItemType;\n  }\n  interface Storage {\n    items: StorageItems;\n    keys: string[];\n  }\n  const storage = cachedStorage<Storage, Storage>(\n    storageKey,\n    JSON.stringify({\n      items: {},\n      keys: [],\n    }),\n  );\n\n  const getItems = async (): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { items, keys } = storage.get();\n    return keys.map(k => items[k]);\n  };\n\n  const createItem = async (item: ItemType): Promise<ItemType> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n    const _item = { ...item, id: uuid() };\n    const _itemsStorage = {\n      keys: [...keys, _item.id],\n      items: { ...items, [_item.id]: _item },\n    };\n    storage.set(_itemsStorage);\n    return _item;\n  };\n\n  const createItems = async (newItems: ItemType[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n    const _items = newItems.map(item => ({ ...item, id: uuid() }));\n    const _newItems = _items.reduce((acc, item) => ({ ...acc, [item.id]: item }), {});\n    const _itemsStorage = {\n      keys: [...keys, ...Object.keys(_newItems)],\n      items: { ...items, ..._newItems },\n    };\n    storage.set(_itemsStorage);\n    return _items;\n  };\n\n  const updateItem = async (item: ItemType): Promise<ItemType> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n    if (item.id && !!items[item.id]) {\n      const _itemsStorage = {\n        keys,\n        items: { ...items, [item.id]: item },\n      };\n      storage.set(_itemsStorage);\n      return item;\n    }\n    throw new Error('Item does not exist');\n  };\n\n  const updateItems = async (updatedItems: ItemType[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n\n    const _items = updatedItems.reduce((acc, item) => ({ ...acc, [item.id || '']: item }), {});\n\n    const _itemsStorage = {\n      keys,\n      items: { ...items, ..._items },\n    };\n\n    storage.set(_itemsStorage);\n\n    return updatedItems;\n  };\n\n  const deleteItem = async (bookId: string): Promise<ItemType> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n    if (!!items[bookId]) {\n      const { [bookId]: _book, ..._items } = items;\n      const _itemsStorage = {\n        keys: keys.filter(k => k !== bookId),\n        items: _items,\n      };\n      storage.set(_itemsStorage);\n      return _book;\n    }\n    throw new Error('Item does not exist');\n  };\n\n  const deleteItems = async (ids: string[]): Promise<ItemType[]> => {\n    await timeout(1000);\n    const { keys, items } = storage.get();\n\n    const deletedItems = ids.map(id => items[id]);\n    const _keys = keys.filter(k => !ids.includes(k));\n    const _items = _keys.reduce((acc, k) => ({ ...acc, [k]: items[k] }), {});\n\n    const _itemsStorage = {\n      keys,\n      items: _items,\n    };\n\n    storage.set(_itemsStorage);\n\n    return deletedItems;\n  };\n\n  return {\n    getItems,\n    createItem,\n    createItems,\n    updateItem,\n    updateItems,\n    deleteItem,\n    deleteItems,\n  };\n};\n","import { Book } from '../books/types';\n\nexport enum ActionTypes {\n  setItems = 'cart/setCart',\n  addItems = 'cart/add',\n  removeItems = 'cart/remove',\n  updateItems = 'cart/update',\n  fetchStart = 'cart/fetchStart',\n  fetchEnd = 'cart/fetchEnd',\n}\n\nexport type Item = Book;\n\nexport interface CartItems {\n  userId: string;\n  items: Item[];\n}\n\nexport interface CartReducer {\n  items: Item[];\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","export enum ActionTypes {\n  setBooks = 'books/setBooks',\n  updateBooks = 'books/updateBooks',\n  addBooks = 'books/addBooks',\n  deleteBooks = 'books/deleteBooks',\n  fetchStart = 'books/fetchStart',\n  fetchEnd = 'books/fetchEnd',\n}\n\nexport interface Book {\n  id?: string;\n  title: string;\n  author: string;\n  published_date: string;\n  book_cover: string;\n  quantity: number;\n}\n\nexport interface BookFormFields {\n  title: string;\n  author: string;\n  published_date: string;\n  book_cover: string;\n  quantity: number;\n}\n\nexport interface Books {\n  [id: string]: Book;\n}\n\nexport interface BooksStorage {\n  books: Books;\n  keys: Array<keyof Books>;\n}\n\nexport interface BooksReducer {\n  books: Book[];\n  loading: boolean;\n  hasLoaded: boolean;\n  errorMessage: string;\n}\n","import { User } from '../users/types';\n\nexport enum ActionTypes {\n  set = 'me/set',\n  clear = 'me/clear',\n}\n\nexport type Me = User;\n\nexport interface MeReducer {\n  me: Me | null;\n  loading: boolean;\n  hasLoaded: boolean;\n}\n","import { UserRoles } from './reducers/users/types';\n\nexport interface Pages {\n  [path: string]: {\n    name: string;\n    roles: string[];\n    href: Function;\n    noNav?: boolean;\n  };\n}\n\nexport const pages: Pages = {\n  '/': {\n    name: 'Books',\n    roles: [UserRoles.admin, UserRoles.client],\n    href: () => '/',\n  },\n  '/book-list': {\n    name: 'Book List',\n    roles: [UserRoles.admin],\n    href: () => '/book-list',\n  },\n  '/my-orders': {\n    name: 'My Orders',\n    roles: [UserRoles.client],\n    href: () => '/my-orders',\n  },\n  '/my-orders/:orderId': {\n    name: 'My Orders',\n    roles: [UserRoles.client],\n    noNav: true,\n    href: (orderId: string) => `/my-orders/${orderId}`,\n  },\n  '/users': {\n    name: 'User List',\n    roles: [UserRoles.admin],\n    href: () => '/users',\n  },\n  '/users/:userId/orders': {\n    name: 'My Orders',\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string) => `/users/${userId}/orders`,\n  },\n  '/users/:userId/orders/:orderId': {\n    name: 'My Orders',\n    roles: [UserRoles.admin, UserRoles.client],\n    noNav: true,\n    href: (userId: string, orderId: string) => `/users/${userId}/orders/${orderId}`,\n  },\n  '/logout': {\n    name: 'Logout',\n    roles: [UserRoles.admin, UserRoles.client],\n    href: () => '/logout',\n  },\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootReducer } from '../rootReducer';\nimport { useCallback, useEffect } from 'react';\nimport { clearMe } from './actions';\nimport { useHistory } from 'react-router';\n\nexport const useMe = () => {\n  const me = useSelector((state: RootReducer) => state.me);\n  return me;\n};\n\nexport const useMeActions = () => {\n  const dispatch = useDispatch();\n\n  return {\n    clearMe: useCallback(() => dispatch(clearMe()), [dispatch]),\n  };\n};\n\nexport const useLogout = () => {\n  const { clearMe } = useMeActions();\n  const { push } = useHistory();\n  useEffect(() => {\n    push('/');\n    clearMe();\n  }, [clearMe, push]);\n};\n","import { Me, ActionTypes } from './types';\n\nexport const setMe = (me: Me) => ({\n  type: ActionTypes.set,\n  payload: { me },\n});\n\nexport const clearMe = () => ({\n  type: ActionTypes.clear,\n});\n","import { crud } from '../helpers';\nimport { User } from './types';\n\nconst { getItems, createItems } = crud<User>('users');\n\nexport const getUsers = getItems;\n\nexport const postUsers = createItems;\n\nexport const authenticate = async (username: string, password: string): Promise<User> => {\n  const savedUsers = await getUsers();\n  const authenticatedUser = savedUsers.find(user => user.username === username && user.password === password);\n  if (authenticatedUser) {\n    return authenticatedUser;\n  }\n  throw new Error('Incorrect credentials');\n};\n","import { User, ActionTypes, UserRoles } from './types';\nimport { AppThunk } from '../store';\nimport { getUsers, postUsers, authenticate } from './crud';\nimport { setMe } from '../me/actions';\n\nconst initialUsers = [\n  {\n    id: '1',\n    name: 'Yagami',\n    surname: 'Light',\n    username: 'Kira',\n    password: 'DeathNode',\n    role: UserRoles.admin,\n  },\n  {\n    id: '2',\n    name: 'User',\n    surname: 'Some',\n    username: 'simple',\n    password: '123',\n    role: UserRoles.client,\n  },\n];\n\nexport const setUsers = (users: User[]) => ({\n  type: ActionTypes.setUsers,\n  payload: { users },\n});\n\nexport const updateUsers = (users: User[]) => ({\n  type: ActionTypes.updateUsers,\n  payload: { users },\n});\n\nexport const removeUsers = (ids: [string]) => ({\n  type: ActionTypes.removeUsers,\n  payload: { ids },\n});\n\nexport const addUsers = (users: User[]) => ({\n  type: ActionTypes.addUsers,\n  payload: { users },\n});\n\nexport const fetchStart = () => ({\n  type: ActionTypes.fetchStart,\n});\n\nexport const fetchEnd = (errorMessage?: string) => ({\n  type: ActionTypes.fetchEnd,\n  payload: { errorMessage },\n});\n\nexport const apiGetUsers = (): AppThunk => async dispatch => {\n  dispatch(fetchStart());\n  try {\n    const users = await getUsers();\n    if (users.length === 0) {\n      const createdUsers = await postUsers(initialUsers);\n      dispatch(setUsers(createdUsers));\n    }\n    if (!!users) {\n      dispatch(setUsers(users));\n    }\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd());\n  }\n};\n\nexport const apiCreateUsers = (users: User[]): AppThunk => async dispatch => {\n  dispatch(fetchStart);\n  try {\n    const createdUsers = await postUsers(users);\n    dispatch(addUsers(createdUsers));\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd());\n  }\n};\n\nexport const apiAuthenticate = (username: string, password: string): AppThunk => async dispatch => {\n  dispatch(fetchStart());\n  try {\n    const authenticatedUser = await authenticate(username, password);\n    dispatch(setMe(authenticatedUser));\n    dispatch(fetchEnd());\n  } catch (e) {\n    console.log(e);\n    dispatch(fetchEnd(e.message));\n  }\n};\n","import { useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootReducer } from '../rootReducer';\nimport { apiAuthenticate, apiGetUsers } from './actions';\nimport { useHistory } from 'react-router';\nimport { useMe } from '../me/hooks';\nimport { UserRoles } from './types';\n\nexport const useGetUsers = (forceFetch?: boolean) => {\n  const dispatch = useDispatch();\n  const { users, loading, hasLoaded, errorMessage } = useSelector((state: RootReducer) => state.users);\n\n  useEffect(() => {\n    if ((!hasLoaded || forceFetch) && !loading) {\n      dispatch(apiGetUsers());\n    }\n  }, [hasLoaded, loading, forceFetch, dispatch]);\n\n  return {\n    users,\n    loading,\n    hasLoaded,\n    errorMessage,\n  };\n};\n\nexport const useAuthenticate = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state: RootReducer) => state.me);\n  const { errorMessage, loading } = useSelector((state: RootReducer) => state.users);\n\n  const authenticated = useMemo(() => !!me, [me]);\n\n  const authenticate = useCallback(\n    (username: string, password: string) => {\n      dispatch(apiAuthenticate(username, password));\n    },\n    [dispatch],\n  );\n\n  return {\n    authenticated,\n    authenticate,\n    errorMessage,\n    loading,\n  };\n};\n\nexport const useAllowAdmin = () => {\n  const { me } = useMe();\n  const { push } = useHistory();\n\n  useEffect(() => {\n    if (me && me.role !== UserRoles.admin) {\n      push('/');\n    }\n  }, [me, push]);\n};\n","export enum ActionTypes {\n  setUsers = 'users/setUsers',\n  updateUsers = 'users/updateUsers',\n  removeUsers = 'users/removeUsers',\n  addUsers = 'users/addUsers',\n  fetchStart = 'users/fetchStart',\n  fetchEnd = 'users/fetchEnd',\n}\n\nexport enum UserRoles {\n  admin = 'admin',\n  client = 'client',\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  surname: string;\n  username: string;\n  password: string;\n  role: UserRoles;\n}\n\nexport interface UsersReducer {\n  users: User[];\n  loading: boolean;\n  hasLoaded: boolean;\n  errorMessage: string | '';\n}\n"],"sourceRoot":""}